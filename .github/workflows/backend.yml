name: Backend Pipeline

on:
  push:
    branches: ["main", "master"]
    paths:
      - ".github/workflows/backend.yml"
      - "Dockerfile"
      - "SistemaBancario.*/**"
      - "SistemaBancario.*"
      - "SistemaBancario.sln"
  pull_request:
    branches: ["main", "master"]
    paths:
      - ".github/workflows/backend.yml"
      - "Dockerfile"
      - "SistemaBancario.*/**"
      - "SistemaBancario.*"
      - "SistemaBancario.sln"
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build-test-deploy:
    name: Build, Test, and Deploy Backend
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: 9.0.x
      TEST_RESULTS_PATH: "**/TestResults/*.trx"
      IMAGE_NAME: backend
      IMAGE_TAG: ${{ github.sha }}
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
      CONTAINER_APP: ${{ vars.BACKEND_CONTAINER_APP }}
      SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          include-prerelease: true

      - name: Restore dependencies
        run: dotnet restore SistemaBancario.sln

      - name: Build solution
        run: dotnet build SistemaBancario.sln --configuration Release --no-restore

      - name: Run tests
        run: dotnet test SistemaBancario.sln --configuration Release --no-build --logger trx

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: ${{ env.TEST_RESULTS_PATH }}
          if-no-files-found: ignore

      - name: Build backend Docker image
        run: docker build --file Dockerfile --tag "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" .

      - name: Log in to Azure Container Registry
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: echo "${ACR_PASSWORD}" | docker login "${ACR_LOGIN_SERVER}" -u "${ACR_USERNAME}" --password-stdin

      - name: Tag backend image for registry
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          REGISTRY_IMAGE="${ACR_LOGIN_SERVER}/${IMAGE_NAME}"
          docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${REGISTRY_IMAGE}:${IMAGE_TAG}"
          docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${REGISTRY_IMAGE}:latest"

      - name: Push backend image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          REGISTRY_IMAGE="${ACR_LOGIN_SERVER}/${IMAGE_NAME}"
          docker push "${REGISTRY_IMAGE}:${IMAGE_TAG}"
          docker push "${REGISTRY_IMAGE}:latest"

      - name: Azure login
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && env.AZURE_CREDENTIALS != ''
        uses: azure/login@v2
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Select subscription
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && env.SUBSCRIPTION_ID != ''
        run: az account set --subscription "${SUBSCRIPTION_ID}"

      - name: Update backend Azure Container App image
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && env.CONTAINER_APP != '' && env.RESOURCE_GROUP != ''
        run: |
          REGISTRY_IMAGE="${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}"
          az containerapp update \
            --name "${CONTAINER_APP}" \
            --resource-group "${RESOURCE_GROUP}" \
            --image "${REGISTRY_IMAGE}"

      - name: Show backend revisions
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && env.CONTAINER_APP != '' && env.RESOURCE_GROUP != ''
        run: |
          az containerapp revision list \
            --name "${CONTAINER_APP}" \
            --resource-group "${RESOURCE_GROUP}" \
            --output table
